#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri May 26 16:45:58 2023

@author: gs1511
"""
import numpy as np
import pandas as pd
import matplotlib as mpl 
import matplotlib.pyplot as plt
from plotting import newfig, savefig

import scipy.io
from scipy.interpolate import griddata
from mpl_toolkits.axes_grid1 import make_axes_locatable
import matplotlib.gridspec as gridspec
import time

t = np.genfromtxt('t.csv',delimiter=',')
x = np.genfromtxt('x.csv',delimiter=',')
Exact  = np.genfromtxt('Exact.csv',delimiter=',')
f_pred  = np.genfromtxt('f_pred.csv',delimiter=',')
u_pred  = np.genfromtxt('u_pred.csv',delimiter=',')
X_u_train =np.genfromtxt('X_u_train.csv',delimiter=',')
u_train =np.genfromtxt('u_train.csv',delimiter=',')

lambda_1_value =np.genfromtxt('lambda_1_value.csv',delimiter='')
lambda_2_value =np.genfromtxt('lambda_2_value.csv',delimiter='')
error_u =np.genfromtxt('error_u.csv',delimiter='')

N_u = 2000
X, T = np.meshgrid(x,t)
X_star = np.hstack((X.flatten()[:,None], T.flatten()[:,None]))
u_star = Exact.flatten()[:,None]              
idx = np.random.choice(X_star.shape[0], N_u, replace=False)

U_pred = griddata(X_star, u_pred.flatten(), (X, T), method='cubic')
# Doman bounds
lb = X_star.min(0)
ub = X_star.max(0)  

 

fig, ax = newfig(1.0,1.4)
ax.axis('off')

gs0 = gridspec.GridSpec(1, 2)
gs0.update(top=1-0.06, bottom=1-1.0/3.0+0.06, left=0.15, right=0.85, wspace=0)
ax = plt.subplot(gs0[:, :])

h = ax.imshow(U_pred.T, interpolation='nearest', cmap='rainbow',
              extent=[t.min(), t.max(), x.min(), x.max()],
              origin='lower', aspect='auto')
divider = make_axes_locatable(ax)
cax = divider.append_axes("right", size="5%", pad=0.05)
fig.colorbar(h, cax=cax)

ax.plot(X_u_train[:,1], X_u_train[:,0], 'kx', label = 'Data (%d points)' % (u_train.shape[0]), markersize = 2, clip_on = False)
  

line = np.linspace(x.min(), x.max(), 2)[:,None]
ax.plot(t[25]*np.ones((2,1)), line, 'w-', linewidth = 1)
ax.plot(t[50]*np.ones((2,1)), line, 'w-', linewidth = 1)
ax.plot(t[75]*np.ones((2,1)), line, 'w-', linewidth = 1)

ax.set_xlabel('t')
ax.set_ylabel('x')
ax.legend(loc='upper center', bbox_to_anchor=(1.0, -0.125), ncol=5, frameon=False)
ax.set_title('u(t,x)', fontsize = 10)    


####### Row 1: u(t,x) slices ##################    
gs1 = gridspec.GridSpec(1, 3)
gs1.update(top=1-1.0/3.0-0.1, bottom=1.0-2.0/3.0, left=0.1, right=0.9, wspace=0.5)

ax = plt.subplot(gs1[0, 0])
ax.plot(x,Exact[25,:], 'b-', linewidth = 2, label = 'Exact')       
ax.plot(x,U_pred[25,:], 'r--', linewidth = 2, label = 'Prediction')
ax.set_xlabel('x')
ax.set_ylabel('u(t,x)')    
ax.set_title('t = 0.25', fontsize = 10)
ax.axis('square')
ax.set_xlim([-1.1,1.1])
ax.set_ylim([-1.1,1.1])

ax = plt.subplot(gs1[0, 1])
ax.plot(x,Exact[50,:], 'b-', linewidth = 2, label = 'Exact')       
ax.plot(x,U_pred[50,:], 'r--', linewidth = 2, label = 'Prediction')
ax.set_xlabel('x')
ax.set_ylabel('u(t,x)')
ax.axis('square')
ax.set_xlim([-1.1,1.1])
ax.set_ylim([-1.1,1.1])
ax.set_title('t = 0.50', fontsize = 10)
ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.35), ncol=5, frameon=False)

ax = plt.subplot(gs1[0, 2])
ax.plot(x,Exact[75,:], 'b-', linewidth = 2, label = 'Exact')       
ax.plot(x,U_pred[75,:], 'r--', linewidth = 2, label = 'Prediction')
ax.set_xlabel('x')
ax.set_ylabel('u(t,x)')
ax.axis('square')
ax.set_xlim([-1.1,1.1])
ax.set_ylim([-1.1,1.1])    
ax.set_title('t = 0.75', fontsize = 10)

####### Row 3: Identified PDE ##################    
savefig('./figures/Burgers_identification_sialounas.eps')  

f_sialounas = 5